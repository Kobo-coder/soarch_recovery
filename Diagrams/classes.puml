@startuml classes
set namespaceSeparator none
class "Article" as zeeguu.core.model.article.Article #AAAA00 {
  MINIMUM_WORD_COUNT : int
  authors
  broken
  content
  deleted
  feed
  feed_id
  fk_difficulty
  htmlContent
  id
  img_url
  img_url_id
  language
  language_id
  published_time
  summary
  title
  topics
  uploader
  uploader_id
  url
  url_id
  userFound : int
  video
  word_count
  add_search(search)
  add_topic(topic)
  all_older_than(days)
  all_younger_than(days)
  article_info(with_content)
  article_info_for_teacher()
  compute_fk_and_wordcount()
  contains_any_of(keywords: list)
  convertHTML2TextIfNeeded()
  create_clone(session, source, uploader)
  create_from_upload(session, title, content, htmlContent, uploader, language)
  exists(article)
  find(url: str)
  find_by_id(id: int)
  find_or_create(session, url: str, html_content, title, authors: str)
  is_owned_by(user)
  mark_as_low_quality_and_remove_from_index()
  own_texts_for_user(user, ignore_deleted)
  remove_search(search)
  star_for_user(session, user, state)
  topics_as_string()
  update(language, content, htmlContent, title)
  update_content(session)
  uploaded_by(uploader_id: int)
  vote_broken()
  with_title_containing(needle)
}
class "ArticleDifficultyFeedback" as zeeguu.core.model.article_difficulty_feedback.ArticleDifficultyFeedback #AAAA00 {
  article
  article_id
  date
  difficulty_feedback
  id
  user
  user_id
  find(user: User, article: Article)
  find_or_create(session, user: User, article: Article, date: datetime, difficulty)
}
class "ArticleRule" as zeeguu.core.test.rules.article_rule.ArticleRule #AAAA00 {
  article : NoneType
}
class "ArticleTest" as zeeguu.core.test.test_article.ArticleTest #AAAA00 {
  article1 : NoneType
  article2 : NoneType
  language
  new_art : NoneType
  setUp()
  test_add_topic()
  test_article_representation_does_not_error()
  test_articles_are_different()
  test_find_or_create()
  test_load_article_without_language_information()
}
class "AutoGECTagging" as zeeguu.core.nlp_pipeline.automatic_gec_tagging.AutoGECTagging #AAAA00 {
  language_pipe : str
  spacy_pipeline
  anottate_clues(word_dictionary_list, original_sentence, verbose)
  generate_labels(error_sentence, corr_sentence, merge_inserts, include_o_start_end, return_tokens, return_err_pos, return_corr_pos, return_alignment, return_corrections, verbose)
  word_lemma_token_sim(token_err, token_ref, verbose)
}
class "BaseRule" as zeeguu.core.test.rules.base_rule.BaseRule #AAAA00 {
  faker
  save(obj)
}
class "BasicSRSchedule" as zeeguu.core.word_scheduling.basicSR.basicSR.BasicSRSchedule #AAAA00 {
  bookmark
  bookmark_id
  consecutive_correct_answers
  cooling_interval
  id
  next_practice_time
  bookmarks_in_pipeline(user)
  bookmarks_to_study(user, required_count)
  find_or_create(db_session, bookmark)
  get_current_study_window()
  print_schedule_for_user(user_id)
  priority_bookmarks_to_study(user, required_count)
  schedule_for_user(user_id)
  set_bookmark_as_learned(db_session)
  total_bookmarks_in_pipeline(user) -> int
  update(db_session, bookmark, outcome)
  update_schedule(db_session, correctness)
}
class "Bookmark" as zeeguu.core.model.bookmark.Bookmark #AAAA00 {
  bookmark
  exercise_log
  fit_for_study
  id
  learned
  learned_time
  learning_cycle
  origin
  origin_id
  starred
  text
  text_id
  time
  translation
  translation_id
  user
  user_id
  add_new_exercise(exercise)
  add_new_exercise_result(exercise_source: ExerciseSource, exercise_outcome: ExerciseOutcome, exercise_solving_speed, session_id: int, other_feedback)
  content_is_not_too_long()
  exists(bookmark)
  find(b_id)
  find_all()
  find_all_by_user_and_word(user, word)
  find_all_for_text_and_user(text, user)
  find_all_for_user_and_article(user, article)
  find_by_specific_user(user)
  find_by_user_word_and_text(user, word, text)
  find_or_create(session, user, _origin: str, _origin_lang: str, _translation: str, _translation_lang: str, _context: str, article_id: int, learning_cycle: int)
  json_serializable_dict(with_context, with_title)
  report_exercise_outcome(exercise_source: str, exercise_outcome: str, solving_speed, session_id, other_feedback, db_session)
  serializable_dictionary()
  should_be_studied()
  sorted_exercise_log()
  translations_rendered_as_text()
  update_fit_for_study(session)
  update_learned_status(session)
}
class "BookmarkRule" as zeeguu.core.test.rules.bookmark_rule.BookmarkRule #AAAA00 {
  bookmark : NoneType, bool
  props : list
}
class "BookmarkTest" as zeeguu.core.test.test_bookmark.BookmarkTest #AAAA00 {
  user
  user_rule
  find_all_for_user_and_text()
  setUp()
  test_add_exercise_outcome()
  test_add_new_exercise()
  test_add_new_exercise_result()
  test_bad_quality_bookmark()
  test_bookmark_is_serializable()
  test_bookmarks_in_article()
  test_bookmarks_to_study_is_not_empty()
  test_exists()
  test_find()
  test_find_all()
  test_find_all_by_user_and_word()
  test_find_by_specific_user()
  test_find_by_user_word_and_text()
  test_fit_for_study()
  test_is_learned_based_on_exercise_outcomes()
  test_latest_exercise_outcome()
  test_text_is_not_too_long()
  test_top_bookmarks()
  test_translation()
  test_user_bookmark_count()
  test_user_has_bookmarks()
}
class "CognacyDifficultyEstimator" as zeeguu.core.language.strategies.cognacy_difficulty_estimator.CognacyDifficultyEstimator #AAAA00 {
  CUSTOM_NAMES : list
  language : str
  score_map : dict
  user : str
  cognacyRatio(language: 'model.Language', user: 'model.User')
  discrete_text_difficulty(median_difficulty: float)
  estimate_difficulty(text: str)
  word_difficulty(known_probabilities: dict, personalized: bool, word: Word)
}
class "CognacyWordHistoryDifficultyEstimator" as zeeguu.core.language.strategies.cognacy_wh_difficulty_estimator.CognacyWordHistoryDifficultyEstimator #AAAA00 {
  CUSTOM_NAMES : list
  language : str
  score_map : dict
  user : str
  difficulty_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp, mode, scaling, scaling2)
  discrete_text_difficulty(median_difficulty: float)
  estimate_difficulty(text: str)
  word_difficulty(known_probabilities: dict, personalized: bool, word: Word)
}
class "Cohort" as zeeguu.core.model.cohort.Cohort #AAAA00 {
  declared_level_max
  declared_level_min
  id
  inv_code
  is_cohort_of_teachers
  language
  language_id
  max_students
  name
  cohort_still_has_capacity()
  exists_with_invite_code(code: str)
  find(id)
  find_by_code(invite_code)
  get_current_student_count()
  get_id(inv)
  get_students()
  get_teachers()
}
class "CohortArticleMap" as zeeguu.core.model.cohort_article_map.CohortArticleMap #AAAA00 {
  article
  article_id
  cohort
  cohort_id
  published_time
  delete_all_for_article(session, article_id)
  delete_all_for_cohort(session, cohort_id)
  find(cohort_id, article_id)
  get_articles_info_for_cohort(cohort)
  get_cohorts_for_article(article)
}
class "CohortRule" as zeeguu.core.test.rules.cohort_rule.CohortRule #AAAA00 {
  cohort
  student1
  teacher
}
class "CohortTest" as zeeguu.core.test.test_cohort.CohortTest #AAAA00 {
  cohort
  cohort_rule
  student1
  user_t
  setUp()
  test_all_cohorts()
  test_cohort_still_has_capacity_false()
  test_cohort_still_has_capacity_true()
  test_is_teacher()
  test_teacher_has_students()
}
class "ContextReducer" as zeeguu.core.nlp_pipeline.reduce_context.ContextReducer #AAAA00 {
  get_similar_sentences(nlp_pipe: SpacyWrapper, sentence: str, article: str, max_length: int)
  reduce_context_for_bookmark(nlp_pipe: SpacyWrapper, sentence: str, bookmark: str, max_length: int)
}
class "CrossDomainApp" as zeeguu.api.cross_domain_app.CrossDomainApp #99DDFF {
  handle_user_exception(e)
}
class "DateTimeEncoder" as zeeguu.api.utils.json_result.DateTimeEncoder #99DDFF {
  default(o)
}
class "DefaultDifficultyEstimator" as zeeguu.core.language.strategies.default_difficulty_estimator.DefaultDifficultyEstimator #AAAA00 {
  estimate_difficulty(text: str, language: 'model.Language', user: 'model.User')
}
class "DefaultDifficultyEstimatorTest" as zeeguu.core.test.tests_difficulty_estimator_strategies.test_default_difficulty_estimator.DefaultDifficultyEstimatorTest #AAAA00 {
  lan
  user
  setUp()
  test_compute_complex_text_difficulty()
  test_compute_simple_text_difficulty()
}
class "DifficultyEstimatorFactory" as zeeguu.core.language.difficulty_estimator_factory.DifficultyEstimatorFactory #AAAA00 {
  get_difficulty_estimator(estimator_name: str) -> Type[DifficultyEstimatorStrategy]
}
class "DifficultyEstimatorFactoryTest" as zeeguu.core.test.test_difficulty_estimator_factory.DifficultyEstimatorFactoryTest #AAAA00 {
  test_custom_names_flesch_kincaid_estimator()
  test_ignore_capitalization()
  test_returns_flesch_kincaid_estimator()
  test_unknown_type_returns_default()
}
class "DifficultyEstimatorStrategy" as zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy #AAAA00 {
  CUSTOM_NAMES : list
  {abstract}estimate_difficulty(text: str, language: 'model.Language', user: 'model.User')
  has_custom_name(estimator_name: str)
}
class "DifficultyLingoRank" as zeeguu.core.model.difficulty_lingo_rank.DifficultyLingoRank #AAAA00 {
  article
  article_id
  difficulty
  id
  value_for_article(article)
}
class "DomainName" as zeeguu.core.model.domain_name.DomainName #AAAA00 {
  domain_name
  id
  extract_domain_name(url)
  find(domain_url)
  find_or_create(session, url: str)
  for_url_string(url_string)
  get_domain(url)
}
class "DomainTest" as zeeguu.core.test.test_domain.DomainTest #AAAA00 {
  user
  user_rule
  setUp()
  test_one_domain_multiple_urls()
  test_url_domain()
}
class "ERRANT_Alignment" as zeeguu.core.nlp_pipeline.alignment_errant.ERRANT_Alignment #AAAA00 {
  align_seq : list
  cor
  cost_matrix
  op_matrix
  orig
  align(lev)
  get_all_equal_edits()
  get_all_merge_edits()
  get_all_split_edits()
  get_cheapest_align_seq()
  get_sub_cost(o, c)
  merge_edits(seq)
}
class "Edit" as zeeguu.core.nlp_pipeline.edit_errant.Edit #AAAA00 {
  c_end
  c_start
  c_str : str
  c_toks
  o_end
  o_start
  o_str : str
  o_toks
  type : str
  minimise()
  to_m2(id)
}
class "Exercise" as zeeguu.core.model.exercise.Exercise #AAAA00 {
  feedback
  id
  outcome
  outcome_id
  session
  session_id
  solving_speed
  source
  source_id
  time
  find(user_id)
  get_bookmark()
  get_user_id()
  is_correct()
  is_too_easy()
  short_string_summary()
}
class "ExerciseOutcome" as zeeguu.core.model.exercise_outcome.ExerciseOutcome #AAAA00 {
  ASKED_FOR_HINT : str
  CORRECT : str
  OTHER_FEEDBACK : str
  RETRY : str
  SHOW_SOLUTION : str
  TOO_EASY : str
  TYPO : str
  WRONG : str
  correct
  correct_outcomes : list
  id
  outcome
  too_easy_outcomes : list
  wrong
  wrong_outcomes : list
  find(outcome: str)
  find_or_create(session, _outcome: str)
  free_text_feedback()
  too_easy()
}
class "ExerciseRule" as zeeguu.core.test.rules.exercise_rule.ExerciseRule #AAAA00 {
  exercise
}
class "ExerciseSessionRule" as zeeguu.core.test.rules.exercise_session_rule.ExerciseSessionRule #AAAA00 {
  exerciseSession
}
class "ExerciseSessionRule" as zeeguu.core.test.rules.user_exercise_session_rule.ExerciseSessionRule #AAAA00 {
  bookmark
  exercise_session
  user
}
class "ExerciseSource" as zeeguu.core.model.exercise_source.ExerciseSource #AAAA00 {
  TOP_BOOKMARKS_MINI_EXERCISE : str
  id
  source
  find(source)
  find_or_create(session, _source)
}
class "<color:red>FailedToParseWithReadabilityServer</color>" as zeeguu.core.content_retriever.crawler_exceptions.FailedToParseWithReadabilityServer #AAAA00 {
  reason
}
class "Feed" as zeeguu.core.model.feed.Feed #AAAA00 {
  deactivated
  description
  feed_handler : NoneType
  feed_type
  icon_name
  id
  image_url
  image_url_id
  language
  language_id
  last_crawled_time
  title
  url
  url_id
  as_dictionary()
  exists(feed)
  feed_health_info()
  feed_items(last_retrieval_time_from_DB)
  find_by_id(i)
  find_by_url(url)
  find_for_language_id(language_code)
  find_or_create(session, url, title, description, icon_name, language: Language, feed_type)
  from_url(url: str, feed_type: int)
  get_articles(limit, after_date, most_recent_first, easiest_first)
  initializeFeedHandler()
}
class "FeedHandler" as zeeguu.core.feed_handler.feed_handler.FeedHandler #AAAA00 {
  description : str
  feed_type : int
  image_url_string : str
  title : str
  url : str
  extract_feed_metadata() -> None
  get_feed_articles() -> list[dict]
  get_server_time(article_date) -> datetime
}
class "FeedRule" as zeeguu.core.test.rules.feed_rule.FeedRule #AAAA00 {
  fake_feed
  feed
  feed1
  feed_fr
  feed_newspaper_da
}
class "FeedTest" as zeeguu.core.test.test_feed.FeedTest #AAAA00 {
  newspaper_da
  spiegel
  setUp()
  test_after_date_works()
  test_article_ordering()
  test_feed_items()
  test_feed_newspaper()
  test_feed_type()
}
class "FleschKincaidDifficultyEstimator" as zeeguu.core.language.strategies.flesch_kincaid_difficulty_estimator.FleschKincaidDifficultyEstimator #AAAA00 {
  AVERAGE_SYLLABLE_LENGTH : float
  CUSTOM_NAMES : list
  discrete_difficulty(score: int)
  estimate_difficulty(text: str, language: 'Language', user: 'User')
  estimate_number_of_syllables_in_word(word: str, language: 'Language')
  estimate_number_of_syllables_in_word_pyphen(word: str, language: 'Language')
  flesch_kincaid_readability_index(text: str, language: 'Language')
  get_constants_for_language(language: 'language')
  grade_difficulty(score: int)
  normalize_difficulty(score: int)
}
class "FleschKincaidReadingEaseDifficultyEstimatorTest" as zeeguu.core.test.tests_difficulty_estimator_strategies.test_flesch_kincaid_difficulty_estimator.FleschKincaidReadingEaseDifficultyEstimatorTest #AAAA00 {
  user
  setUp()
  test_danish()
  test_discrete_50()
  test_discrete_80()
  test_discrete_above_80()
  test_discrete_below_0()
  test_discrete_below_50()
  test_discrete_between_80_and_50()
  test_english_constants()
  test_english_easy()
  test_english_hard()
  test_english_medium()
  test_german_constants()
  test_german_easy()
  test_german_hard()
  test_german_medium()
  test_normalized_0()
  test_normalized_100()
  test_normalized_above_100()
  test_normalized_below_0()
  test_normalized_between_100_and_0()
  test_recognized_by_FK()
  test_recognized_by_FKIndex()
  test_recognized_by_flesch_kincaid()
}
class "FrequencyDifficultyEstimator" as zeeguu.core.language.strategies.frequency_difficulty_estimator.FrequencyDifficultyEstimator #AAAA00 {
  CUSTOM_NAMES : list
  language : str
  score_map : defaultdict
  discrete_text_difficulty(median_difficulty: float)
  estimate_difficulty(text: str)
  quadratic(language: 'model.Language')
  word_difficulty(known_probabilities: dict, personalized: bool, w)
}
class "FrequencyDifficultyEstimatorTest" as zeeguu.core.test.tests_difficulty_estimator_strategies.test_frequency_difficulty_estimator.FrequencyDifficultyEstimatorTest #AAAA00 {
  lan
  user
  setUp()
  test_compute_very_simple_text_difficulty()
}
class "GoogleTranslateWithContext" as zeeguu.api.utils.translator.GoogleTranslateWithContext #99DDFF {
  get_result(data)
}
class "GoogleTranslateWithoutContext" as zeeguu.api.utils.translator.GoogleTranslateWithoutContext #99DDFF {
  get_result(data)
}
class "JSONSerializable" as zeeguu.core.util.encoding.JSONSerializable #AAAA00 {
  {abstract}serialize()
}
class "Language" as zeeguu.core.model.language.Language #AAAA00 {
  CODES_OF_LANGUAGES_AVAILABLE_AS_NATIVE : list
  CODES_OF_LANGUAGES_THAT_CAN_BE_LEARNED : list
  LANGUAGE_NAMES : dict
  code
  id
  name
  all()
  all_reading_for_user(user)
  as_dictionary()
  available_languages()
  default_learned()
  default_native_language()
  find(code)
  find_by_id(i)
  find_or_create(language_code)
  get_articles(after_date, most_recent_first, easiest_first)
  native_languages()
}
class "LanguageRule" as zeeguu.core.test.rules.language_rule.LanguageRule #AAAA00 {
  da
  de
  en
  es
  fr
  it
  languages : dict
  nl
  no
  pt
  random
  ro
  get_or_create_language(language_id)
}
class "LanguageTest" as zeeguu.core.test.test_language.LanguageTest #AAAA00 {
  user
  setUp()
  test_get_all_languages()
  test_languages_exists()
  test_native_language()
  test_user_set_language()
}
class "LearningCycle" as zeeguu.core.model.learning_cycle.LearningCycle #AAAA00 {
  NOT_SET : int
  PRODUCTIVE : int
  RECEPTIVE : int
}
class "LocalizedTopic" as zeeguu.core.model.localized_topic.LocalizedTopic #AAAA00 {
  id
  keywords
  language
  language_id
  topic
  topic_id
  topic_translated
  all_articles()
  all_for_language(language)
  matches_article(article)
}
class "LocalizedTopicTest" as zeeguu.core.test.test_localized_topic.LocalizedTopicTest #AAAA00 {
  user
  setUp()
  test_topic_matching()
  test_topic_matching_is_case_sensitive()
}
class "LoggingTest" as zeeguu.core.test.test_logging.LoggingTest #AAAA00 {
  test_logging()
}
class "MicrosoftTranslateWithContext" as zeeguu.api.utils.translator.MicrosoftTranslateWithContext #99DDFF {
  get_result(data)
}
class "MicrosoftTranslateWithoutContext" as zeeguu.api.utils.translator.MicrosoftTranslateWithoutContext #99DDFF {
  get_result(data)
}
class "ModelTestMixIn" as zeeguu.core.test.model_test_mixin.ModelTestMixIn #AAAA00 {
  app
  faker : NoneType
  run(result)
  setUp()
  tearDown()
}
class "NewspaperFeed" as zeeguu.core.feed_handler.newspaperfeed.NewspaperFeed #AAAA00 {
  description
  image_url_string
  title
  use_cache : bool
  extract_feed_metadata() -> None
  get_feed_articles() -> list[dict]
}
class "NoiseGenerator" as zeeguu.core.nlp_pipeline.confusion_generator.NoiseGenerator #AAAA00 {
  language : str
  lemma_set : set
  noise_probabilities : dict
  pos_confusion_set : NoneType
  spacy_pipe
  word_confusion_set : NoneType
  generate_confusion_words(sentence, number_of_words, student_words, verbose)
  replace_sent_with_noise(sentence, number_of_mistakes, number_of_words, verbose)
}
class "OutcomeRule" as zeeguu.core.test.rules.outcome_rule.OutcomeRule #AAAA00 {
  correct
  outcomes : list
  random
  retry
  show_solution
  too_easy
  typo
  wrong
}
class "PersonalCopy" as zeeguu.core.model.personal_copy.PersonalCopy #AAAA00 {
  article
  article_id
  id
  user
  user_id
  all_for(user)
  exists_for(user, article)
  make_for(user, article, session)
  remove_for(user, article, session)
}
class "RSSFeed" as zeeguu.core.feed_handler.rssfeed.RSSFeed #AAAA00 {
  description : str
  image_url_string : str
  title : str
  extract_feed_metadata() -> None
  get_feed_articles() -> list[dict]
}
class "ReadingSessionRule" as zeeguu.core.test.rules.user_reading_session_rule.ReadingSessionRule #AAAA00 {
  w_session
}
class "Search" as zeeguu.core.model.search.Search #AAAA00 {
  id
  keywords
  all_articles()
  as_dictionary()
  find(keywords: str)
  find_by_id(i)
  find_or_create(session, keywords)
}
class "SearchFilter" as zeeguu.core.model.search_filter.SearchFilter #AAAA00 {
  id
  search
  search_id
  user
  user_id
  all_for_user(user)
  find_or_create(session, user, search)
  with_search(search_id)
  with_search_id(i, user)
}
class "SearchSubscription" as zeeguu.core.model.search_subscription.SearchSubscription #AAAA00 {
  id
  search
  search_id
  user
  user_id
  all_for_user(user)
  find_or_create(session, user, search)
  with_search(search_id)
  with_search_id(i, user)
}
class "Session" as zeeguu.core.model.session.Session #AAAA00 {
  id
  last_use
  user
  user_id
  find(id: str, request)
  find_for_id(session_id)
  find_for_user(user)
  for_user(user)
  update_use_date()
}
class "<color:red>SkippedAlreadyInDB</color>" as zeeguu.core.content_retriever.crawler_exceptions.SkippedAlreadyInDB #AAAA00 {
}
class "<color:red>SkippedForLowQuality</color>" as zeeguu.core.content_retriever.crawler_exceptions.SkippedForLowQuality #AAAA00 {
  reason
}
class "<color:red>SkippedForTooOld</color>" as zeeguu.core.content_retriever.crawler_exceptions.SkippedForTooOld #AAAA00 {
}
class "SortedExerciseLog" as zeeguu.core.model.sorted_exercise_log.SortedExerciseLog #AAAA00 {
  exercises
  compact_sorted_exercise_log()
  is_empty()
  last_exercise()
  last_exercise_time()
  latest_exercise_outcome()
  most_recent_correct_dates()
  most_recent_corrects()
  str_most_recent_correct_dates()
  summary()
}
class "SourceRule" as zeeguu.core.test.rules.source_rule.SourceRule #AAAA00 {
  random
  recognize
  sources : list
  translate
  zeekoe
}
class "SpacyWrapper" as zeeguu.core.nlp_pipeline.spacy_wrapper.SpacyWrapper #AAAA00 {
  spacy_pipe
  get_doc(sentence)
  get_sent_list(lines)
  get_sent_similarity(sentence_a, sentence_b)
  tokenize_sentence(sentence)
}
class "StarredArticle" as zeeguu.core.model.starred_article.StarredArticle #AAAA00 {
  id
  language
  language_id
  starred_date
  title
  url
  url_id
  user
  user_id
  all_for_user(user)
  as_dict()
  delete(session, user, _url)
  find_or_create(session, user: User, _url, _title: str, _language)
}
class "Teacher" as zeeguu.core.model.teacher.Teacher #AAAA00 {
  id
  user
  user_id
  exists(user)
  from_user(user)
  get_cohorts()
}
class "TeacherCohortMap" as zeeguu.core.model.teacher_cohort_map.TeacherCohortMap #AAAA00 {
  cohort
  cohort_id
  id
  user
  user_id
  find_or_create(user, cohort, session)
  get_cohorts_for(user)
  get_teachers_for(cohort)
  is_teacher(user)
}
class "TestRetrieveAndCompute" as zeeguu.core.test.test_retrieve_and_compute.TestRetrieveAndCompute #AAAA00 {
  lan
  user
  setUp()
  testDifficultyOfFeedItems()
  testDownloadWithTopic()
  test_fragment_removal()
  test_le_monde_subscription()
  test_ml_classification()
  test_new_scientist_overlay()
  test_sufficient_quality()
}
class "Text" as zeeguu.core.model.text.Text #AAAA00 {
  article
  article_id
  content
  content_hash
  id
  language
  language_id
  url
  url_id
  all_bookmarks(user)
  find_all(text, language)
  find_or_create(session, text, language, url, article)
  shorten_word_context(given_word, max_word_count)
  update_content(new_content)
  words()
}
class "TextRule" as zeeguu.core.test.rules.text_rule.TextRule #AAAA00 {
  text
}
class "TextTest" as zeeguu.core.test.test_text.TextTest #AAAA00 {
  bookmark_rule
  text_rule
  user_rule
  setUp()
  test_user_word_count()
}
class "Topic" as zeeguu.core.model.topic.Topic #AAAA00 {
  id
  title
  all_articles(limit)
  as_dictionary()
  clear_all_articles_cache()
  find(name: str)
  find_by_id(i)
  get_all_topics()
}
class "TopicFilter" as zeeguu.core.model.topic_filter.TopicFilter #AAAA00 {
  id
  topic
  topic_id
  user
  user_id
  all_for_user(user)
  all_for_user_as_list(user)
  find_or_create(session, user, topic)
  with_id(i)
  with_topic_id(i, user)
}
class "TopicSubscription" as zeeguu.core.model.topic_subscription.TopicSubscription #AAAA00 {
  id
  topic
  topic_id
  user
  user_id
  all_for_user(user)
  all_for_user_as_list(user)
  find_or_create(session, user, topic)
  with_id(i)
  with_topic_id(i, user)
}
class "UniqueCode" as zeeguu.core.model.unique_code.UniqueCode #AAAA00 {
  code
  email
  id
  time
  all_codes_for(email)
  last_code(email)
}
class "Url" as zeeguu.core.model.url.Url #AAAA00 {
  domain
  domain_name_id
  id
  path
  title
  as_canonical_string()
  as_string()
  domain_name()
  extract_canonical_url(url: str)
  find(url, title)
  find_or_create(session: 'Session', _url: str, title: str)
  get_domain(url)
  get_path(url: str)
  render_link(link_text)
  title_if_available()
}
class "UrlRule" as zeeguu.core.test.rules.url_rule.UrlRule #AAAA00 {
  url
}
class "UrlTest" as zeeguu.core.test.test_url.UrlTest #AAAA00 {
  url_rule
  setUp()
  test_domain_plus_path_must_be_unique()
  test_find_or_create_works()
  test_try_to_get_race_condition()
}
class "User" as zeeguu.core.model.user.User #AAAA00 {
  ANONYMOUS_EMAIL_DOMAIN : str
  EMAIL_VALIDATION_REGEX : str
  cohort
  cohort_id
  email
  id
  invitation_code
  is_dev
  learned_language
  learned_language_id
  name
  native_language
  native_language_id
  password
  password_salt
  active_during_recent(days: int)
  all_bookmarks(after_date, before_date, language_id)
  all_bookmarks_fit_for_study()
  all_reading_sessions(after_date, before_date, language_id)
  all_recent_user_ids(days)
  authorize(email, password)
  authorize_anonymous(uuid, password)
  bookmark_count()
  bookmark_counts_by_date()
  bookmarks_by_date(after_date)
  bookmarks_by_day(with_context, after_date, max, with_title, language_id)
  bookmarks_by_url_by_date(n_days)
  bookmarks_chronologically()
  bookmarks_for_article(article_id, with_context, with_title, good_for_study, json)
  bookmarks_in_pipeline()
  bookmarks_to_study(bookmark_count)
  cohort_articles_for_user()
  create_anonymous(uuid, password, learned_language_code, native_language_code)
  create_default_user_preference()
  date_of_last_bookmark()
  details_as_dictionary()
  email_exists(email)
  exists(user)
  find(email)
  find_all()
  find_by_id(id)
  get_new_bookmarks_to_study(bookmarks_count)
  has_bookmarks()
  isTeacher()
  learned_bookmarks(count)
  learner_stats_data()
  levels_for(language: Language)
  liked_articles()
  preferred_difficulty_estimator()
  reading_sessions_by_day(after_date, max, language_id)
  scheduled_bookmarks(bookmark_count)
  set_learned_language(language_code, session)
  set_learned_language_level(language_code: str, level: str, session)
  set_native_language(code)
  starred_bookmarks(count)
  text_difficulty(text, language)
  total_bookmarks_in_pipeline()
  update_password(password: str)
  user_words()
  validate_email(col, email)
  validate_name(col, name)
  validate_password(col, password)
  word_count()
}
class "UserActivityData" as zeeguu.core.model.user_activitiy_data.UserActivityData #AAAA00 {
  article
  article_id
  event
  extra_data
  has_article_id
  id
  time
  user
  user_id
  value
  create_from_post_data(session, data, user)
  data_as_dictionary()
  find(user: User, article: Article, extra_filter: str, extra_value: str, event_filter: str, only_latest, article_id: int)
  find_or_create(session, user, time, event, value, extra_data, has_article_id, article_id)
  find_url_in_extra_data()
  get_article_id(db_session)
  is_feedback()
  is_like()
}
class "UserArticle" as zeeguu.core.model.user_article.UserArticle #AAAA00 {
  article
  article_id
  id
  liked
  opened
  starred
  user
  user_id
  all_liked_articles_of_user(user)
  all_starred_and_liked_articles_of_user_info(user)
  all_starred_articles_of_user(user)
  all_starred_articles_of_user_info(user)
  all_starred_or_liked_articles_of_user(user, limit)
  exists(obj)
  find(user: User, article: Article)
  find_by_article(article: Article)
  find_or_create(session, user: User, article: Article, opened, liked, starred)
  last_interaction()
  set_liked(new_state)
  set_opened(state)
  set_starred(state)
  user_article_info(user: User, article: Article, with_content, with_translations)
  user_info_as_string()
}
class "UserArticleRule" as zeeguu.core.test.rules.user_article_rule.UserArticleRule #AAAA00 {
  user_article
}
class "UserArticleTest" as zeeguu.core.test.test_user_article.UserArticleTest #AAAA00 {
  article
  user
  user_article
  setUp()
  test_all_starred_articles()
  test_all_starred_or_liked_articles()
  test_article_is_not_starred_initially()
}
class "UserExerciseSession" as zeeguu.core.model.user_exercise_session.UserExerciseSession #AAAA00 {
  duration
  id
  is_active
  last_action_time
  start_time
  user
  user_id
  exercises_in_session_string()
  find_by_cohort(cohort_id, from_date: str, to_date: str)
  find_by_id(id)
  find_by_user_id(user_id, from_date: str, to_date: str)
}
class "UserLanguage" as zeeguu.core.model.user_language.UserLanguage #AAAA00 {
  cefr_level
  declared_level_max
  declared_level_min
  doing_exercises
  id
  inferred_level_max
  inferred_level_min
  language
  language_id
  reading_news
  user
  user_id
  all_for_user(user)
  find_or_create(session, user, language)
  get()
  with_language_id(i, user)
}
class "UserPreference" as zeeguu.core.model.user_preference.UserPreference #AAAA00 {
  AUDIO_EXERCISES : str
  DIFFICULTY_ESTIMATOR : str
  PRODUCTIVE_EXERCISES : str
  id
  key
  user
  user_id
  value
  all_for_user(user: User)
  find(user: User, key: str)
  find_or_create(session, user: User, key: str, value: str)
  get()
  get_difficulty_estimator(user: User)
  get_productive_exercises_setting(user: User)
  is_productive_exercises_preference_enabled(user: User)
  set(value: str)
  set_difficulty_estimator(session, user: User, key: value)
}
class "UserPreferenceTest" as zeeguu.core.test.test_user_preferences.UserPreferenceTest #AAAA00 {
  english
  random_origin_language
  random_origin_word
  text : str
  user
  user_rule
  user_word_rule
  setUp()
  test_no_preference_at_first()
  test_setting_preference()
  test_text_difficulty_with_preference()
}
class "UserReadingSession" as zeeguu.core.model.user_reading_session.UserReadingSession #AAAA00 {
  article
  article_id
  duration
  id
  is_active
  last_action_time
  start_time
  user
  user_id
  events_in_this_session()
  find_by_article(article, from_date: str, to_date: str, is_active: bool, cohort: bool)
  find_by_cohort(cohort, from_date: str, to_date: str, is_active: bool)
  find_by_id(session_id)
  find_by_user(user_id, from_date: str, to_date: str, is_active: bool)
  find_by_user_and_article(user, article)
  get_reading_session_timeout()
  human_readable_date()
  human_readable_duration()
  json_serializable_dict()
}
class "UserRule" as zeeguu.core.test.rules.user_rule.UserRule #AAAA00 {
  user
  add_bookmarks(bookmark_count, exercises_count)
}
class "UserTest" as zeeguu.core.test.test_user.UserTest #AAAA00 {
  user
  setUp()
  test_active_during_recent()
  test_all_bookmarks()
  test_authorize()
  test_authorize_anonymous()
  test_bookmark_counts_by_date()
  test_bookmarks_by_date()
  test_bookmarks_chronologically()
  test_create_anonymous()
  test_date_of_last_bookmark()
  test_exists()
  test_update_password()
  test_validate_email()
  test_validate_name()
  test_validate_password()
}
class "UserWord" as zeeguu.core.model.user_word.UserWord #AAAA00 {
  IMPORTANCE_LEVEL_STEP : int
  IMPOSSIBLE_IMPORTANCE_LEVEL : float
  IMPOSSIBLE_RANK : int
  id
  language
  language_id
  rank
  word
  exists(word, language)
  find(_word: str, language: Language)
  find_all()
  find_or_create(session, _word: str, language: Language)
  importance_level()
  importance_level_string()
}
class "UserWordRule" as zeeguu.core.test.rules.user_word_rule.UserWordRule #AAAA00 {
  user_word
}
class "UserWordTest" as zeeguu.core.test.test_user_word.UserWordTest #AAAA00 {
  setUp()
  test_exists()
  test_find()
  test_find_all()
  test_find_or_create()
  test_importance_level()
}
class "WordHistoryDifficultyEstimator" as zeeguu.core.language.strategies.word_history_difficulty_estimator.WordHistoryDifficultyEstimator #AAAA00 {
  CUSTOM_NAMES : list
  language : str
  score_map : dict
  user : str
  difficulty(language: 'model.Language', user: 'model.User', mode)
  difficulty_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp, mode, scaling, scaling2)
  discrete_text_difficulty(median_difficulty: float)
  estimate_difficulty(text: str)
  recurrence(language: 'model.Language', user: 'model.User')
  recurrence_until_timestamp(language: 'model.Language', user: 'model.User', max_timestamp)
  word_difficulty(known_probabilities: dict, personalized: bool, word: Word)
}
class "WordRankDifficultyEstimator" as zeeguu.core.language.strategies.word_rank_difficulty_estimator.WordRankDifficultyEstimator #AAAA00 {
  CUSTOM_NAMES : list
  discrete_difficulty(score: int)
  estimate_difficulty(text: str, language: 'model.Language', user: 'model.User')
  get_constants_for_language(language: 'model.language')
  normalize_difficulty(score: int)
  word_rank_readability_score(text: str, language: 'model.Language')
}
class "WordToStudy" as zeeguu.core.model.word_to_study.WordToStudy #AAAA00 {
  bookmark
  bookmark_id
  consecutiveCorrects
  coolingInterval
  id
  language_id
  nextDueDate
  user
  user_id
  find(bookmark)
}
class "WordnikTranslate" as zeeguu.api.utils.translator.WordnikTranslate #99DDFF {
  get_result(data)
}
class "ZeeguuMailer" as zeeguu.core.emailer.zeeguu_mailer.ZeeguuMailer #AAAA00 {
  message_body
  message_subject
  our_email
  password
  server_name
  to_email
  username
  notify_audio_experiment(data, user)
  send()
  send_content_retrieved_notification(article, old_content)
  send_feedback(subject, context, message, user)
  send_mail(subject, content_lines)
  send_with_yagmail()
}
zeeguu.core.feed_handler.newspaperfeed.NewspaperFeed --|> zeeguu.core.feed_handler.feed_handler.FeedHandler
zeeguu.core.feed_handler.rssfeed.RSSFeed --|> zeeguu.core.feed_handler.feed_handler.FeedHandler
zeeguu.core.language.strategies.cognacy_difficulty_estimator.CognacyDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.cognacy_wh_difficulty_estimator.CognacyWordHistoryDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.default_difficulty_estimator.DefaultDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.flesch_kincaid_difficulty_estimator.FleschKincaidDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.frequency_difficulty_estimator.FrequencyDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.word_history_difficulty_estimator.WordHistoryDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.language.strategies.word_rank_difficulty_estimator.WordRankDifficultyEstimator --|> zeeguu.core.language.difficulty_estimator_strategy.DifficultyEstimatorStrategy
zeeguu.core.test.rules.article_rule.ArticleRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.bookmark_rule.BookmarkRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.cohort_rule.CohortRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.exercise_rule.ExerciseRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.exercise_session_rule.ExerciseSessionRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.feed_rule.FeedRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.language_rule.LanguageRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.outcome_rule.OutcomeRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.source_rule.SourceRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.text_rule.TextRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.url_rule.UrlRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.user_article_rule.UserArticleRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.user_exercise_session_rule.ExerciseSessionRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.user_reading_session_rule.ReadingSessionRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.user_rule.UserRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.rules.user_word_rule.UserWordRule --|> zeeguu.core.test.rules.base_rule.BaseRule
zeeguu.core.test.test_article.ArticleTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_bookmark.BookmarkTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_cohort.CohortTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_difficulty_estimator_factory.DifficultyEstimatorFactoryTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_domain.DomainTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_feed.FeedTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_language.LanguageTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_localized_topic.LocalizedTopicTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_retrieve_and_compute.TestRetrieveAndCompute --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_text.TextTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_url.UrlTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_user.UserTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_user_article.UserArticleTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_user_preferences.UserPreferenceTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.test_user_word.UserWordTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.tests_difficulty_estimator_strategies.test_default_difficulty_estimator.DefaultDifficultyEstimatorTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.tests_difficulty_estimator_strategies.test_flesch_kincaid_difficulty_estimator.FleschKincaidReadingEaseDifficultyEstimatorTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.test.tests_difficulty_estimator_strategies.test_frequency_difficulty_estimator.FrequencyDifficultyEstimatorTest --|> zeeguu.core.test.model_test_mixin.ModelTestMixIn
zeeguu.core.feed_handler.newspaperfeed.NewspaperFeed --* zeeguu.core.model.feed.Feed : feed_handler
zeeguu.core.feed_handler.rssfeed.RSSFeed --* zeeguu.core.model.feed.Feed : feed_handler
zeeguu.core.language.strategies.default_difficulty_estimator.DefaultDifficultyEstimator --* zeeguu.core.language.difficulty_estimator_factory.DifficultyEstimatorFactory : _default_estimator
zeeguu.core.model.article.Article --* zeeguu.core.test.rules.article_rule.ArticleRule : article
zeeguu.core.model.article.Article --* zeeguu.core.test.rules.article_rule.ArticleRule : article
zeeguu.core.model.article.Article --* zeeguu.core.test.test_article.ArticleTest : article1
zeeguu.core.model.article.Article --* zeeguu.core.test.test_article.ArticleTest : article2
zeeguu.core.model.article.Article --* zeeguu.core.test.test_article.ArticleTest : new_art
zeeguu.core.model.bookmark.Bookmark --* zeeguu.core.test.rules.bookmark_rule.BookmarkRule : bookmark
zeeguu.core.model.cohort.Cohort --* zeeguu.core.model.user.User : cohort
zeeguu.core.model.cohort.Cohort --* zeeguu.core.test.rules.cohort_rule.CohortRule : cohort
zeeguu.core.model.cohort.Cohort --* zeeguu.core.test.test_cohort.CohortTest : cohort
zeeguu.core.model.domain_name.DomainName --* zeeguu.core.model.url.Url : domain
zeeguu.core.model.exercise.Exercise --* zeeguu.core.test.rules.exercise_rule.ExerciseRule : exercise
zeeguu.core.model.exercise_outcome.ExerciseOutcome --* zeeguu.core.model.exercise.Exercise : outcome
zeeguu.core.model.exercise_outcome.ExerciseOutcome --* zeeguu.core.model.exercise.Exercise : outcome
zeeguu.core.model.exercise_outcome.ExerciseOutcome --* zeeguu.core.model.exercise.Exercise : outcome
zeeguu.core.model.exercise_outcome.ExerciseOutcome --* zeeguu.core.model.exercise.Exercise : outcome
zeeguu.core.model.feed.Feed --* zeeguu.core.test.rules.feed_rule.FeedRule : fake_feed
zeeguu.core.model.feed.Feed --* zeeguu.core.test.rules.feed_rule.FeedRule : feed
zeeguu.core.model.feed.Feed --* zeeguu.core.test.rules.feed_rule.FeedRule : feed1
zeeguu.core.model.feed.Feed --* zeeguu.core.test.rules.feed_rule.FeedRule : feed_fr
zeeguu.core.model.feed.Feed --* zeeguu.core.test.rules.feed_rule.FeedRule : feed_newspaper_da
zeeguu.core.model.feed.Feed --* zeeguu.core.test.test_feed.FeedTest : spiegel
zeeguu.core.model.feed.Feed --* zeeguu.core.test.test_feed.FeedTest : newspaper_da
zeeguu.core.model.language.Language --* zeeguu.core.model.user.User : learned_language
zeeguu.core.model.language.Language --* zeeguu.core.model.user.User : native_language
zeeguu.core.model.language.Language --* zeeguu.core.test.test_article.ArticleTest : language
zeeguu.core.model.language.Language --* zeeguu.core.test.test_retrieve_and_compute.TestRetrieveAndCompute : lan
zeeguu.core.model.language.Language --* zeeguu.core.test.test_user_preferences.UserPreferenceTest : random_origin_language
zeeguu.core.model.language.Language --* zeeguu.core.test.test_user_preferences.UserPreferenceTest : english
zeeguu.core.model.language.Language --* zeeguu.core.test.tests_difficulty_estimator_strategies.test_default_difficulty_estimator.DefaultDifficultyEstimatorTest : lan
zeeguu.core.model.language.Language --* zeeguu.core.test.tests_difficulty_estimator_strategies.test_frequency_difficulty_estimator.FrequencyDifficultyEstimatorTest : lan
zeeguu.core.model.text.Text --* zeeguu.core.test.rules.text_rule.TextRule : text
zeeguu.core.model.url.Url --* zeeguu.core.model.article.Article : img_url
zeeguu.core.model.url.Url --* zeeguu.core.test.rules.url_rule.UrlRule : url
zeeguu.core.model.user.User --* zeeguu.core.test.rules.cohort_rule.CohortRule : teacher
zeeguu.core.model.user.User --* zeeguu.core.test.rules.cohort_rule.CohortRule : student1
zeeguu.core.model.user.User --* zeeguu.core.test.rules.user_exercise_session_rule.ExerciseSessionRule : user
zeeguu.core.model.user.User --* zeeguu.core.test.rules.user_rule.UserRule : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_bookmark.BookmarkTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_cohort.CohortTest : user_t
zeeguu.core.model.user.User --* zeeguu.core.test.test_cohort.CohortTest : student1
zeeguu.core.model.user.User --* zeeguu.core.test.test_domain.DomainTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_language.LanguageTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_localized_topic.LocalizedTopicTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_retrieve_and_compute.TestRetrieveAndCompute : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_user.UserTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_user.UserTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.test_user_preferences.UserPreferenceTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.tests_difficulty_estimator_strategies.test_default_difficulty_estimator.DefaultDifficultyEstimatorTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.tests_difficulty_estimator_strategies.test_flesch_kincaid_difficulty_estimator.FleschKincaidReadingEaseDifficultyEstimatorTest : user
zeeguu.core.model.user.User --* zeeguu.core.test.tests_difficulty_estimator_strategies.test_frequency_difficulty_estimator.FrequencyDifficultyEstimatorTest : user
zeeguu.core.model.user_article.UserArticle --* zeeguu.core.test.rules.user_article_rule.UserArticleRule : user_article
zeeguu.core.model.user_article.UserArticle --* zeeguu.core.test.test_user_article.UserArticleTest : user_article
zeeguu.core.model.user_exercise_session.UserExerciseSession --* zeeguu.core.test.rules.exercise_session_rule.ExerciseSessionRule : exerciseSession
zeeguu.core.model.user_exercise_session.UserExerciseSession --* zeeguu.core.test.rules.user_exercise_session_rule.ExerciseSessionRule : exercise_session
zeeguu.core.model.user_reading_session.UserReadingSession --* zeeguu.core.test.rules.user_reading_session_rule.ReadingSessionRule : w_session
zeeguu.core.model.user_word.UserWord --* zeeguu.core.test.rules.user_word_rule.UserWordRule : user_word
zeeguu.core.test.rules.bookmark_rule.BookmarkRule --* zeeguu.core.test.test_text.TextTest : bookmark_rule
zeeguu.core.test.rules.cohort_rule.CohortRule --* zeeguu.core.test.test_cohort.CohortTest : cohort_rule
zeeguu.core.test.rules.text_rule.TextRule --* zeeguu.core.test.test_text.TextTest : text_rule
zeeguu.core.test.rules.url_rule.UrlRule --* zeeguu.core.test.test_url.UrlTest : url_rule
zeeguu.core.test.rules.user_rule.UserRule --* zeeguu.core.test.test_bookmark.BookmarkTest : user_rule
zeeguu.core.test.rules.user_rule.UserRule --* zeeguu.core.test.test_domain.DomainTest : user_rule
zeeguu.core.test.rules.user_rule.UserRule --* zeeguu.core.test.test_text.TextTest : user_rule
zeeguu.core.test.rules.user_rule.UserRule --* zeeguu.core.test.test_user_preferences.UserPreferenceTest : user_rule
zeeguu.core.test.rules.user_word_rule.UserWordRule --* zeeguu.core.test.test_user_preferences.UserPreferenceTest : user_word_rule
zeeguu.core.model.text.Text --o zeeguu.core.model.bookmark.Bookmark : text
zeeguu.core.model.user.User --o zeeguu.core.model.user_preference.UserPreference : user
zeeguu.core.model.user_word.UserWord --o zeeguu.core.model.bookmark.Bookmark : origin
zeeguu.core.model.user_word.UserWord --o zeeguu.core.model.bookmark.Bookmark : translation
@enduml
